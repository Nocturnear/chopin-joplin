Module 1: Joplin Harmonies
- Create recombinant generative model for Joplin harmonies
	+ Include logic to recognize beginning/end patterns to bookend harmonies
	+ Recognize harmony pattern candidates by looking for repetitions in pieces
	+ Decide on [duration, key signature, time signature, tempo] of composition
	
	+ Generate some number of harmonies for the composition
		- Can use Mod.cycle(phrase, #beats) to repeat patterns
		- Can use Mod.elongate(score, scaleFactor) to decrease tempo of patterns
			o Don't forget to score.setTempo(score.getTempo()*scaleFactor) afterwards
		- Cannot increase tempo of patterns
		- Can use Mod.transpose(score, #semitones) to change key signature of patterns
		- Cannot change time signature of patterns
		
Module 2: Chopin Melodies	
- Create naive Bayes classifier for Chopin melodies
	+ Create frequency distribution of features for each composition in the Chopin corpus to use as attributes
		- A feature is two measures long
	+ Attributes: 
		- Highest note
		- Lowest note
		- Starting note
		- Ending note
		- # of notes
		- Ascending/descending
		- Most numerous interval between notes
		- Least numerous interval between notes
- Create recombinant generative model of Chopin melodies that passes classifier
	+ Take [duration, key signature, time signature, tempo] as input from previous module
	+ Generate melodies that gets validated by the classifier

Module 3: Integration
- Combine the melody and harmony into final composition